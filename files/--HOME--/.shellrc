#!/usr/bin/env zsh

# vim:filetype=zsh syntax=zsh tabstop=2 shiftwidth=2 softtabstop=2 expandtab autoindent fileencoding=utf-8

################################################################################
# This file is sourced only for login shells. It is used to define the bare
# minimum shell functions and env vars that are needed during bootstrap of a
# vanilla OS to bootstrap installation of all other config files.
#
# file location: ${HOME}/.shellrc
# load order: .zshenv [.shellrc], .zshrc [.shellrc, .zshrc.custom [.aliases [.shellrc, .aliases.custom]]], .zlogin
################################################################################

# execute 'FIRST_INSTALL=true zsh' to debug the load order of the custom zsh configuration files
test -n "${FIRST_INSTALL+1}" && echo "loading ${0}"

export LANG='en_US.UTF-8'
export LANGUAGE='en_US.UTF-8'
export LC_COLLATE='en_US.UTF-8'
export LC_CTYPE='en_US.UTF-8'
export LC_MESSAGES='en_US.UTF-8'
export LC_MONETARY='en_US.UTF-8'
export LC_NUMERIC='en_US.UTF-8'
export LC_TIME='en_US.UTF-8'
export LC_ALL='en_US.UTF-8'
export LESSCHARSET='utf-8'

export ZDOTDIR="${ZDOTDIR:-${HOME}}"
export XDG_CACHE_HOME="${HOME}/.cache"
export XDG_CONFIG_HOME="${HOME}/.config"
export XDG_DATA_HOME="${HOME}/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"

# Note: Change these as per your settings. Deleting them will essentially unset the var(s) and thus any aliases/backup-operations/etc will not be processed for those deleted variable(s)

# ------------ Env vars for basic/common setup ------------
# The github username where the setup scripts are downloaded from
export GH_USERNAME="vraravam"

# Vijay's github username for setting upstream remote
export UPSTREAM_GH_USERNAME="vraravam" # Note: Do NOT change this

# This repo is cloned into this location
export DOTFILES_DIR="${HOME}/.bin-oss"

# All development codebases are cloned into a subfolder of this folder
export PROJECTS_BASE_DIR="${HOME}/dev"

# Executable scripts that are not shared as part of this public repo are present here
export PERSONAL_BIN_DIR="${HOME}/personal/dev/bin"

# Many configuration files (eg `.envrc`, `.tool-versions`), that might contain sensitive info and so cannot be committed into those repos are stored here and symlinked to their target destination
export PERSONAL_CONFIGS_DIR="${HOME}/personal/dev/configs"

# ------------ Env vars for advanced setup ------------
# All browser profiles are captured in this folder (might contain sensitive info like browsing history and so is considered private)
export PERSONAL_PROFILES_DIR="${HOME}/personal/$(whoami)/profiles"

# Keybase username
export KEYBASE_USERNAME="avijayr"

# Keybase home repo name
export KEYBASE_HOME_REPO_NAME="home"

# Keybase profiles repo name
export KEYBASE_PROFILES_REPO_NAME="profiles"

# -----------------------------------------------------

colorize() {
  printf "\x1b[${1}m"
}

NC=$(colorize '0') # No Color
BLACK=$(colorize '0;30')
DARK_GRAY=$(colorize '1;30')
RED=$(colorize '0;31')
LIGHT_RED=$(colorize '1;31')
GREEN=$(colorize '0;32')
LIGHT_GREEN=$(colorize '1;32')
ORANGE=$(colorize '0;33')
YELLOW=$(colorize '1;33')
BLUE=$(colorize '0;34')
LIGHT_BLUE=$(colorize '1;34')
PURPLE=$(colorize '0;35')
LIGHT_PURPLE=$(colorize '1;35')
CYAN=$(colorize '0;36')
LIGHT_CYAN=$(colorize '1;36')
LIGHT_GRAY=$(colorize '0;37')
WHITE=$(colorize '1;37')

blue() {
  printf "${BLUE}${1}${NC}"
}

cyan() {
  printf "${LIGHT_CYAN}${1}${NC}"
}

green() {
  printf "${GREEN}${1}${NC}"
}

red() {
  printf "${RED}${1}${NC}"
}

yellow() {
  printf "${YELLOW}${1}${NC}"
}

warn() {
  echo "$(yellow "**WARN** ${1}")"
}

success() {
  echo "$(green "**SUCCESS** ${1}")"
}

debug() {
  warn "${1}"
  echo "${PATH}"
}

section_header() {
  echo "$(blue "==> ${1} <==")"
}

is_non_zero_string() {
  ! test -z "${1}"
}

is_file() {
  is_non_zero_string "${1}" && test -f "${1}"
}

is_executable() {
  is_non_zero_string "${1}" && test -e "${1}"
}

is_directory() {
  is_non_zero_string "${1}" && test -d "${1}"
}

ensure_dir_exists_if_var_defined() {
  if is_non_zero_string "${1}"; then
    mkdir -p "${1}"
  else
    warn "Skipping creation of the directory since '${1}' is not defined"
  fi
}

is_git_repo() {
  is_directory "${1}/.git"
}

load_file_if_exists() {
  # shellcheck disable=SC2015
  # shellcheck disable=SC1090
  is_file "${1}" && source "${1}"
}

delete_directory_if_exists() {
  is_directory "${1}" && echo "$(red "Deleting") '$(green "${1}")'" && sudo rm -rf "${1}"
}

command_exists() {
  type "${1}" &> /dev/null 2>&1
}

# Note: This function is kind of equivalent to 'omz reload', but that doesn't seem to work when installing on a vanilla OS
load_zsh_configs() {
  local file_list=('.zshenv' '.zshrc' '.zlogin')
  for file in "${file_list[@]}"; do
    FIRST_INSTALL=true load_file_if_exists "${ZDOTDIR}/${file}"
  done
}

append_to_path_if_dir_exists() {
  is_directory "${1}" && path+="${1}"
}

append_to_fpath_if_dir_exists() {
  is_directory "${1}" && fpath+="${1}"
}

prepend_to_path_if_dir_exists() {
  is_directory "${1}" && export PATH="${1}:${PATH+:${PATH}}"
}

prepend_to_manpath_if_dir_exists() {
  is_directory "${1}" && export MANPATH="${1}:${MANPATH+:${MANPATH}}"
}

prepend_to_ldflags_if_dir_exists() {
  is_directory "${1}" && export LDFLAGS="-L${1} ${LDFLAGS+ ${LDFLAGS}}"
}

prepend_to_cppflags_if_dir_exists() {
  is_directory "${1}" && export CPPFLAGS="-I${1} ${CPPFLAGS+ ${CPPFLAGS}}"
}

prepend_to_pkg_config_path_if_dir_exists() {
  is_directory "${1}" && export PKG_CONFIG_PATH="${1}${PKG_CONFIG_PATH+:${PKG_CONFIG_PATH}}"
}

is_macos() {
  [[ "${OSTYPE}" =~ 'darwin' ]]
}

is_linux() {
  [[ "${OSTYPE}" =~ 'Linux' ]]
}

is_windows() {
  [[ "${OSTYPE}" =~ 'MINGW' ]]
}

if is_macos; then
  # Uninstall and reinstall xcode (useful immediately after upgrade or if reinstalling the OS)
  reinstall_xcode() {
    # delete if already present
    delete_directory_if_exists "/Applications/Xcode.app"

    xcode-select --install
    sudo xcodebuild -license accept -quiet || true
  }

  # Uninstall and reinstall xcode command line tools (useful immediately after upgrade or if reinstalling the OS)
  reinstall_xcode_cmdline_tools() {
    # delete if already present
    delete_directory_if_exists "/Library/Developer/CommandLineTools"

    # install using the non-gui cmd-line alone
    touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
    sudo softwareupdate -ia --agree-to-license --force
    rm /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
  }
fi
