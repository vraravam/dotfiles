#!/usr/bin/env zsh

# vim:filetype=zsh syntax=zsh tabstop=2 shiftwidth=2 softtabstop=2 expandtab autoindent fileencoding=utf-8

################################################################################
# This file is sourced at the end of the .aliases file to load custom aliases
# and functions. It is intentionally kept separate from the .aliases file so that
# folks who do not opt into the advanced setup can effectively delete this file
# if they choose to.
#
# file location: ${HOME}/.aliases.custom
# load order: .zshenv [.shellrc], .zshrc [.shellrc, .zshrc.custom [.aliases [.shellrc, .aliases.custom]]], .zlogin
################################################################################

# execute 'FIRST_INSTALL=true zsh' to debug the load order of the custom zsh configuration files
test -n "${FIRST_INSTALL+1}" && echo "loading ${0}"

type command_exists &> /dev/null 2>&1 || source "${HOME}/.shellrc"

# opens the relevant files and folders (used for laptop provisioning) in a single VSCode session
command_exists code && alias code-gist='code ${PERSONAL_CONFIGS_DIR} ${PERSONAL_BIN_DIR} ${PERSONAL_PROFILES_DIR}/.envrc ${PERSONAL_PROFILES_DIR}/.gitignore ${DOTFILES_DIR} ${HOME}/.gitconfig-* ${HOME}/.tool-versions ${HOME}/.envrc'

# updates the specified repo (ie creates a local commit of changed files that I am not interested in verifying, but which need to be committed into that repo)
# internal function: not to be called separately
_update_repo() {
  ! is_directory "${1}" && warn "skipping updating the repo since '${1}' doesn't exist" && return

  # Remove trailing slash if present
  local folder="${1%\/}"

  # shellcheck disable=SC2005
  section_header "Updating '${folder}'"
  rm -rfv "${folder}/.git/index.lock" "${folder}/.git/hooks"
  local git_cmd="git -C ${folder}"

  # shellcheck disable=SC2086
  eval "${git_cmd} add ${2} && ${git_cmd} sci \"Incremental commit: $(date)\""
}

# updates the home and profiles repos
update_all_repos() {
  # TODO: Make this work with 'git relative-path' alias
  _update_repo "${HOME}" 'personal/dev/configs/defaults/'
  is_directory "${PERSONAL_PROFILES_DIR}" && _update_repo "${PERSONAL_PROFILES_DIR}" '.'
}

status_all_repos() {
  st "${HOME}"; st "${DOTFILES_DIR}"; st "${PERSONAL_PROFILES_DIR}"
}

# pushes the specified repo (disables and re-enables cron while doing this operation)
# internal function: not to be called separately
_push_repo() {
  ! is_directory "${1}" && warn "skipping pushing the repo since '${1}' doesn't exist" && return

  # shellcheck disable=SC2005
  section_header "Pushing $(yellow "${1}")" && git -C "${1}" push --force-with-lease && success "*** Pushed $(yellow "${1}")"
}

# pushes the home and profiles repos to their respective remotes (disables and re-enables cron while doing this operation)
push_all_repos() {
  crontab -r &> /dev/null 2>&1

  _push_repo "${HOME}"
  is_directory "${PERSONAL_PROFILES_DIR}" && _push_repo "${PERSONAL_PROFILES_DIR}"

  recron
}

# resurrects the cron entries based on the '${PERSONAL_CONFIGS_DIR}/crontab.txt' file
recron() {
  # shellcheck disable=SC2005
  section_header "Old cron listing"
  crontab -l

  local cron_file="${PERSONAL_CONFIGS_DIR}/crontab.txt"
  ! is_file "${cron_file}" && warn "No '${cron_file} found; returning without any processing" && return

  # shellcheck disable=SC2005
  echo "$(red "---------------------------------------------------------------------------")"
  crontab -r &> /dev/null 2>&1
  crontab "${cron_file}"

  # shellcheck disable=SC2005
  section_header "New cron listing"
  crontab -l
}

# runs git gc on the keybase remote repos (not sure if this actually compresses the remote repo or not)
command_exists keybase && alias kbgc="keybase git gc --force ${KEYBASE_HOME_REPO_NAME}; keybase git gc --force ${KEYBASE_PROFILES_REPO_NAME}"

if is_macos && command_exists brew; then
  # brew cask contribution
  check_cask() {
    # shasum -a 256 <fileName>
    # cd $(brew --repository homebrew/cask-versions) &&
    brew audit --online --cask "${1}" && brew style --fix --cask "${1}"
    # cd -
    # brew fetch --cask "${1}"
  }

  # brew contribution
  check_formula() {
    brew install --build-from-source "${1}"
    brew test "${1}"
    brew audit --strict "${1}"
  }
fi

# delete all personal data before re-imaging the laptop
implode() {
  local folders=(
    '.aws'
    '.bin-oss'
    '.cache'
    '.config'
    '.docker'
    '.envrc'
    '.git'
    '.gnupg'
    '.local'
    '.npm'
    '.psql'
    '.s3cfg'
    '.ssh'
    '.tldrc'
    'Brewfile'
    'dev'
    'personal'
  )
  for f in "${folders[@]}"; do
    rm -rfv "${HOME}/${f}"*
  done
}

# common build, debug and launch aliases for any folder - converted to functions for lazy evaluation
# these will use the current folder name to find the shell script to run
launch_me() {
  "${PERSONAL_BIN_DIR}/launch-${PWD##*/}.sh"
}
debug_me() {
  "${PERSONAL_BIN_DIR}/debug-${PWD##*/}.sh"
}
build_me() {
  "${PERSONAL_BIN_DIR}/build-${PWD##*/}.sh"
}

# findrb() {
#   find . -iname "*.rb" -print0 | xargs -0 egrep -in --color "$@"
# }

# findyml() {
#   find . -iname "*.yml" -print0 | xargs -0 egrep -in --color "$@"
# }

# findrake() {
#   find . -iname "*.rake" -print0 | xargs -0 egrep -in --color "$@"
# }

# findhtmlerb() {
#   find . -iname "*.html.erb" -print0 | xargs -0 egrep -in --color "$@"
# }

# findjs() {
#   find . -iname "*.js*" -print0 | xargs -0 egrep -in --color "$@"
# }

# rails
# alias rs="rails s -b 0.0.0.0"
# alias rc="rails c"
# alias rdb="rails db"
# alias sp="RAILS_ENV=test be rake spec"
# alias clean_bundles_from_git="rm -rfv $GEM_HOME/bundler/gems $GEM_HOME/cache/bundler/git"
# alias rdm="be rake db:drop db:create db:migrate db:seed"
# alias be='bundle exec'
# alias rubo='be rake rubocop:auto_correct'
# alias brake='be rake brakeman:run\[brakeman-report.html\]'

# phoenix
# alias mc='iex -S mix'
# alias mes='mix ecto.setup'
# alias mer='mix ecto.reset'
# alias mch='MIX_ENV=test mix coveralls.html'
# alias mcd='MIX_ENV=test mix coveralls.detail'
# alias sps='mix phx.server'
# alias spsd='iex -S mix phx.server'
