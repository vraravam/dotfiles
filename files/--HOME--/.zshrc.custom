#!/usr/bin/env zsh

# vim:filetype=zsh syntax=zsh tabstop=2 shiftwidth=2 softtabstop=2 expandtab autoindent fileencoding=utf-8

################################################################################
# This file is sourced at the end of the .zshrc file to load custom zssh configs.
# It is intentionally kept separate from the .zshrc file so that folks who do not
# opt into the advanced setup can effectively delete this file if they choose to.
#
# file location: ${HOME}/.zshrc.custom
# load order: .zshenv, .zprofile, .zshrc [.shellrc, .zshrc.custom [.aliases [.shellrc, .aliases.custom]]], .zlogin
################################################################################

# execute 'FIRST_INSTALL=true zsh' to debug the load order of the custom zsh configuration files
test -n "${FIRST_INSTALL+1}" && echo "loading ${0}"

type append_to_path_if_dir_exists &> /dev/null 2>&1 || source "${HOME}/.shellrc"

# setup paths in the beginning so that all other conditions work correctly
append_to_path_if_dir_exists "${PERSONAL_BIN_DIR}"
append_to_path_if_dir_exists "${DOTFILES_DIR}/scripts"
append_to_path_if_dir_exists "${PROJECTS_BASE_DIR}/oss/git_scripts"
# Note: Not sure if its a bug, but the first iterm tab alone has all the paths, but these are missing in subsequent tabs and new windows
append_to_path_if_dir_exists "/usr/local/bin"

zsh-defer load_file_if_exists "${HOME}/.aliases"

# erlang history in iex
# export ERL_AFLAGS="-kernel shell_history enabled -kernel shell_history_file_bytes 1024000"

if is_macos; then
  # setopt glob_dots                # no special treatment for file names with a leading dot
  # setopt no_auto_menu             # require an extra TAB press to open the completion menu
  # setopt auto_menu                # automatically use menu completion
  # setopt list_beep
  # setopt correct_all              # autocorrect commands
  # setopt always_to_end            # move cursor to end if word had one match

  setopt append_history           # append history list to the history file
  setopt share_history            # share history between different instances of the shell
  setopt inc_append_history       # append command to history file immediately after execution
  setopt extended_history         # save each command's beginning timestamp and the duration to the history file
  setopt hist_ignore_all_dups     # do not put duplicated command into history list
  setopt hist_ignore_dups         # do not store duplications
  setopt hist_allow_clobber
  setopt hist_reduce_blanks       # remove unnecessary blanks
  setopt hist_save_no_dups        # do not save duplicated command
  setopt auto_cd                  # cd into directory if the name is not an alias or function, but matches a directory
  setopt auto_pushd               # make cd push the old directory onto the directory stack
  setopt pushd_silent             # do not print the directory stack after pushd or popd
  setopt pushd_ignore_dups        # donâ€™t push multiple copies of the same directory
  setopt beep                     # beep on error or on completion of long commands
  setopt extended_glob
  setopt local_options
  setopt auto_list                # automatically list choices on an ambiguous completion.
  setopt list_ambiguous
  setopt list_types               # if the file being listed is a directory, show a trailing slash
  setopt no_case_glob             # case-insensitive globbing
  setopt hist_expire_dups_first   # expire duplicates first
  setopt hist_find_no_dups        # ignore duplicates when searching

  # console colors
  autoload -U colors && colors

  # colorize completion
  # zstyle ':completion:*:*:kill:*:processes' list-colors "=(#b) #([0-9]#)*=$color[cyan]=$color[red]"
  # zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
  # zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
  # case insensitive path-completion
  zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*'
  # partial completion suggestions
  zstyle ':completion:*' list-suffixeszstyle ':completion:*' expand prefix suffix
  # prevent CVS and SVN from being completed
  zstyle ':completion:*:(all-|)files' ignored-patterns '(|*/)CVS'
  zstyle ':completion:*:cd:*' ignored-patterns '(*/)#CVS'
  # ignore completion functions
  zstyle ':completion:*:functions' ignored-patterns '_*'
  # ignore what's already selected on line
  zstyle ':completion:*:(rm|kill|diff):*' ignore-line yes
  # hosts completion for some commands
  # local knownhosts
  # knownhosts=( ${${${${(f)"$(<${HOME}/.ssh/known_hosts)"}:#[0-9]*}%%\ *}%%,*} )
  # zstyle ':completion:*:(ssh|scp|sftp):*' hosts $knownhosts
  compctl -k hosts ftp lftp ncftp ssh w3m lynx links elinks nc telnet rlogin host
  compctl -k hosts -P '@' finger

  # manpage completion
  man_glob() {
    local a
    read -cA a
    if [[ $a[2] = -s ]]; then
      reply=( ${^manpath}/man$a[3]/${1}*${2}(N:t:r) )
    else
      reply=( ${^manpath}/man*/${1}*${2}(N:t:r) )
    fi
  }

  compctl -K man_glob -x 'C[-1,-P]' -m - 'R[-*l*,;]' -g '*.(man|[0-9nlpo](|[a-z]))' + -g '*(-/)' -- man
  # fuzzy matching
  zstyle ':completion:*' completer _complete _match _approximate
  zstyle ':completion:*:match:*' original only
  zstyle ':completion:*:approximate:*' max-errors 1 numeric
  # completion cache
  zstyle ':completion:*' use-cache on
  zstyle ':completion:*' cache-path "${XDG_CACHE_HOME}/zsh"
  # remove trailing slash in directory names, useful for ln
  zstyle ':completion:*' squeeze-slashes true
  # docker completion
  zstyle ':completion:*:*:docker:*' option-stacking yes
  zstyle ':completion:*:*:docker-*:*' option-stacking yes

  # Use modern completion system (needs to be run AFTER some zstyle defns; usually a good idea to do so after all of them)
  autoload -Uz compinit && compinit -C -d "${XDG_CACHE_HOME}/zcompdump-${ZSH_VERSION}"

  autoload -U _git

  # Turn on autocomplete predictions
  autoload -U incremental-complete-word predict-on
  zle -N incremental-complete-word
  zle -N predict-on
  zle -N predict-off
  bindkey '^Xi' incremental-complete-word
  bindkey '^Xp' predict-on
  bindkey '^X^P' predict-off

  if command_exists brew; then
    export HOMEBREW_NO_ANALYTICS=1
    export HOMEBREW_CLEANUP_MAX_AGE_DAYS=3
    export HOMEBREW_CLEANUP_PERIODIC_FULL_DAYS=3
    export HOMEBREW_BAT=1
    export HOMEBREW_VERBOSE_USING_DOTS=1
    export HOMEBREW_BUNDLE_FILE="${HOME}/Brewfile"
    # TODO: Uncomment once this feature is stabilized
    # export HOMEBREW_VERIFY_ATTESTATIONS=1

    prepend_to_manpath_if_dir_exists "${HOMEBREW_PREFIX}/share/man"

    use_homebrew_installation_for() {
      ! is_directory "${1}" && return

      prepend_to_path_if_dir_exists "${1}/bin"
      prepend_to_path_if_dir_exists "${1}/libexec/bin"
      prepend_to_path_if_dir_exists "${1}/libexec/gnubin"
      # For compilers to find this installation you may need to set:
      prepend_to_ldflags_if_dir_exists "${1}/lib"
      prepend_to_cppflags_if_dir_exists "${1}/include"
      # For pkg-config to find this installation you may need to set:
      prepend_to_pkg_config_path_if_dir_exists "${1}/lib/pkgconfig"
      prepend_to_manpath_if_dir_exists "${1}/libexec/gnuman"
    }

    # override default curl and use from homebrew installation
    use_homebrew_installation_for "${HOMEBREW_PREFIX}/opt/curl"

    # zlib - required for installing python via mise
    use_homebrew_installation_for "${HOMEBREW_PREFIX}/opt/zlib"

    # override default Sqlite3 and use from homebrew installation
    use_homebrew_installation_for "${HOMEBREW_PREFIX}/opt/sqlite"

    # override default gnu-tar and use from homebrew installation
    use_homebrew_installation_for "${HOMEBREW_PREFIX}/opt/gnu-tar"

    # override default openssl and use from homebrew installation
    local openssl_dir="${HOMEBREW_PREFIX}/opt/openssl@3"
    is_directory "${openssl_dir}" && use_homebrew_installation_for "${openssl_dir}" && export RUBY_CONFIGURE_OPTS="--with-openssl-dir=${openssl_dir}"
  fi
fi

# Make VSCodium use the VS Code marketplace
if command_exists codium; then
  export VSCODE_GALLERY_SERVICE_URL='https://marketplace.visualstudio.com/_apis/public/gallery'
  export VSCODE_GALLERY_CACHE_URL='https://vscode.blob.core.windows.net/gallery/index'
  export VSCODE_GALLERY_ITEM_URL='https://marketplace.visualstudio.com/items'
  export VSCODE_GALLERY_CONTROL_URL=''
  export VSCODE_GALLERY_RECOMMENDATIONS_URL=''
fi

# Use bat to colorize man pages
command_exists bat && export MANPAGER="sh -c 'col -bx | bat -l man -p'"

# defines word-boundaries: ensures that deleting word on /path/to/file deletes only 'file' and not the directory, this removes the '/' from $WORDCHARS
export WORDCHARS="${WORDCHARS:s#/#}"
export WORDCHARS="${WORDCHARS:s#.#}"

# rspec and cucumber
export CUCUMBER_COLORS="pending_param=magenta:failed_param=magenta:passed_param=magenta:skipped_param=magenta"
export RSPEC="true"

# fzy
# zsh-defer load_file_if_exists "${HOME}/.fzy-key-bindings.zsh"

# remove empty components to avoid '::' ending up + resulting in './' being in $PATH, etc
path=( "${path[@]:#}" )
fpath=( "${fpath[@]:#}" )
infopath=( "${infopath[@]:#}" )
manpath=( "${manpath[@]:#}" )
